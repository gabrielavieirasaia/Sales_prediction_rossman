# -*- coding: utf-8 -*-
"""Rossman.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SKsKsdbXA2KkQMoFQU7CtuXtgH7vdslD

Importing libraries
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import datetime

sales_train_df = pd.read_csv('/content/train.csv', low_memory=False)
store_info_df = pd.read_csv('/content/store.csv')

"""#Basic analysis of 'train' dataset."""

sales_train_df.head()

sales_train_df.shape

sales_train_df.head()

sales_train_df.describe()

sales_train_df.isnull().sum()

sales_train_df['DayOfWeek'].unique()

sales_train_df['Open'].unique()

sales_train_df['Promo'].unique()

sales_train_df['StateHoliday'].unique()

sales_train_df['SchoolHoliday'].unique()

sales_train_df.info()

sales_train_df.describe()

"""# Describing store characteristics"""

store_info_df.shape

store_info_df.head()

store_info_df.info()

store_info_df.describe()

"""# Exploring Data"""

sns.heatmap(sales_train_df.isnull());

sales_train_df.isnull().sum()

sales_train_df.hist(bins=30, figsize=(20,20))

sales_train_df['Customers'].max()

closed_train_df = sales_train_df[sales_train_df['Open'] == 0]
open_train_df = sales_train_df[sales_train_df['Open'] == 1]

print('Total', len(sales_train_df))
print('The stores were closed on =', len(closed_train_df),'days')
print('The stores were open on =', len(open_train_df),'days')

sales_train_df = sales_train_df[sales_train_df['Open'] == 1]

sales_train_df.shape

sales_train_df.drop(['Open'], axis = 1, inplace=True)

sales_train_df.head()

sales_train_df.describe()

"""# Checking stores data"""

sns.heatmap(store_info_df.isnull(), cbar=False);

store_info_df[store_info_df['CompetitionDistance'].isnull()]

store_info_df[store_info_df['CompetitionOpenSinceMonth'].isnull()]

store_info_df[store_info_df['CompetitionOpenSinceYear'].isnull()]

store_info_df[store_info_df['Promo2']==0]

str_cols = ['Promo2SinceWeek', 'Promo2SinceYear', 'PromoInterval', 'CompetitionOpenSinceMonth', 'CompetitionOpenSinceYear']
for str in str_cols:
  store_info_df[str].fillna(0, inplace=True)



store_info_df.info()

sns.heatmap(store_info_df.isnull())

store_info_df['CompetitionDistance'].fillna(store_info_df['CompetitionDistance'].mean(), inplace=True)

store_info_df.hist(bins=30, figsize= (20,20));

sales_train_all_df = pd.merge (sales_train_df, store_info_df, how = 'inner', on = 'Store')

sales_train_all_df.shape

sales_train_all_df.head()

sns.heatmap(sales_train_all_df.isnull(), cbar= False)

correlations = sales_train_all_df.corr()
f, ax = plt.subplots(figsize=(20,20))
sns.heatmap(correlations, annot=True);

correlations = sales_train_all_df.corr()['Sales'].sort_values()
correlations

sales_train_all_df['Year'] = pd.DatetimeIndex(sales_train_all_df['Date']).year
sales_train_all_df['Month'] = pd.DatetimeIndex(sales_train_all_df['Date']).month
sales_train_all_df['Day'] = pd.DatetimeIndex(sales_train_all_df['Date']).day

sales_train_all_df.head()

axis = sales_train_all_df.groupby('Month')[['Sales']].mean().plot(figsize=(10,5), marker = 'o')
axis.set_title('Average Monthly Sale')

axis = sales_train_all_df.groupby('Month')[['Customers']].mean().plot(figsize=(10,5), marker = 'x', color = 'r')
axis.set_title('Average Customers per Month')

axis = sales_train_all_df.groupby('Day')[['Customers']].mean().plot(figsize=(10,5), marker = '^', color = 'b')
axis.set_title('Average Customers per Day')

axis = sales_train_all_df.groupby('Day')[['Sales']].mean().plot(figsize=(10,5), marker = 'o', color = 'r')
axis.set_title('Average Sales per Day')

axis = sales_train_all_df.groupby('DayOfWeek')[['Sales']].mean().plot(figsize=(10,5), marker = 'o', color = 'r')
axis.set_title('Average Sales per Day')

fig, ax = plt.subplots(figsize = (20,10))
sales_train_all_df.groupby(['Date', 'StoreType']).mean()['Sales'].unstack().plot(ax = ax)

sns.barplot(x = 'Promo', y = 'Sales', data = sales_train_all_df);

sns.barplot(x = 'Promo', y = 'Customers', data = sales_train_all_df);

"""# Training the model"""

!pip install prophet
from prophet import Prophet

#Date :ds
#Sales: y
def sales_prediction(store_id, sales_df, periods):
  sales_df = sales_df[sales_df['Store'] == store_id]
  sales_df = sales_df[['Date', 'Sales']].rename(columns = {'Date': 'ds', 'Sales': 'y'})
  sales_df = sales_df.sort_values(by = 'ds')

  model = Prophet()
  model.fit(sales_df)
  future = model.make_future_dataframe(periods = periods)
  forecast = model.predict(future)
  figure1 = model.plot(forecast, xlabel = 'Data', ylabel = 'Vendas')
  figure2 = model.plot_components(forecast)

  return sales_df, forecast

df = sales_prediction(10, sales_train_all_df, 60)
df

df_origin, df_prediction = sales_prediction(10, sales_train_all_df, 10)

df_origin.shape, df_prediction.shape

df_prediction.head()

df_prediction.tail(60).to_csv('previsoes_vendas.csv')

df_origin.tail()

"""## Training the model - Part
In this area we are focused on State Holidays and School Holidays
Bearign in mind: a = public holiday, b = Easter, c = Christmas, 0 = regular day

--Modelo que leva em consideração é a sazonalidade
"""

def sales_prediction(store_id, sales_df, holidays, periods):
  sales_df = sales_df[sales_df['Store'] == store_id]
  sales_df = sales_df[['Date', 'Sales']].rename(columns = {'Date': 'ds', 'Sales': 'y'})
  sales_df = sales_df.sort_values(by = 'ds')

  model = Prophet(holidays=holidays)
  model.fit(sales_df)
  future = model.make_future_dataframe(periods = periods)
  forecast = model.predict(future)
  figure1 = model.plot(forecast, xlabel = 'Data', ylabel = 'Vendas')
  figure2 = model.plot_components(forecast)

  return sales_df, forecast

sales_train_all_df.head()

school_holidays = sales_train_all_df[sales_train_all_df['SchoolHoliday'] == 1].loc[:, 'Date'].values
school_holidays.shape

school_holidays

len(np.unique(school_holidays))

state_holidays = sales_train_all_df[(sales_train_all_df['StateHoliday'] == 'a') |
                                    (sales_train_all_df['StateHoliday'] == 'b') |
                                    (sales_train_all_df['StateHoliday'] == 'c')].loc[:,'Date'].values

state_holidays.shape

len(np.unique(state_holidays))

state_holidays = pd.DataFrame({'ds': pd.to_datetime(state_holidays),
                               'holiday': 'state_holiday'})
state_holidays

school_holidays = pd.DataFrame({'ds': pd.to_datetime(school_holidays),
                               'holiday': 'school_holiday'})
school_holidays

school_state_holidays = pd.concat((state_holidays, school_holidays))
school_state_holidays

df_original, df_prediction = sales_prediction(10, sales_train_all_df, school_state_holidays, 5)

df_prediction.head()